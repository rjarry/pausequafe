/*******************************************************************************
*                                                                              *
* The MIT licence                                                              *
*                                                                              *
* Copyright (c) 2009 PauseQuafe                                                *
* Author : Gregory Boissinot  & Robin Jarry                                    *
*                                                                              *
* Permission is hereby granted, free of charge, to any person obtaining a copy *
* of this software and associated documentation files (the "Software"), to deal*
* in the Software without restriction, including without limitation the rights *
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    *
* copies of the Software, and to permit persons to whom the Software is        *
* furnished to do so, subject to the following conditions:                     *
*                                                                              *
* The above copyright notice and this permission notice shall be included in   *
* all copies or substantial portions of the Software.                          *
*                                                                              *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN    *
* THE SOFTWARE.                                                                *
*******************************************************************************/

import java.text.SimpleDateFormat

usePlugin 'java'

archivesBaseName="PauseQuafe"

def timestamp = new SimpleDateFormat('yyyyMMddHHmm').format(new Date())
version="1.0-$timestamp"

repositories {
 flatDir(dirs:'lib')
 flatDir(dirs:'lib/tools')
}


manifest.mainAttributes("Main-Class": "org.pausequafe.PQLauncher")
manifest.mainAttributes("Version": version)



// Set of dependencies container
configurations{
 // windows will contain windows dependencies and rutime dependencies
 // note : runtime configuration extends the compile configuration (by the java plugin)
 windows{
 extendsFrom runtime
 }
 macosx{
 extendsFrom runtime
 }
 macosxTools
}

// Fill in dependencies container
dependencies {
 compile ":jdom:1.0",
         ":JEveCore_Modified:2.0",
         ":qtjambi:4.5.2_01",
          ":sqlitejdbc:v054"

 windows ":qtjambi-win32-msvc2005:4.5.2_01"
 macosx ":qtjambi-macosx-gcc:4.5.2_01"
 macosxTools ":jarbundler:2.1.0"
 
}

// Set of sources container and parameters
sourceSets {
 windows{
 java.srcDirs file('src/main'), file('build/generated')
}
 macosx{
 java.srcDirs file('src/main'), file('build/generated')
 }
}

def juicGeneratedDir="$buildDir/generated"
def normalizedBuildDir=buildDir.path.replace('\\','/')
def executableDir="$normalizedBuildDir/executables"

task init << {
 file(executableDir).mkdirs()
}

task juic (dependsOn:'init')<< {
 def path= System.getenv("PATH")
 ant.exec(executable: "juic"){
       env(key:"PATH", path:path)
       arg(value:"-d")
       arg(value:juicGeneratedDir)
       arg(value:"-cp")
       arg(value:"src/main")
 }
}




// Skip default jar
compileJava.enabled=false
processResources.enabled=false
classes.enabled=false
jar.enabled=false

compileWindowsJava.dependsOn juic
compileMacosxJava.dependsOn juic

// Generate the windows jar with all its own manifest
task windowsJar(type:Jar){
 dependsOn windowsClasses
 classifier="windows"
 destinationDir=file('build/libs/windows')
 from (sourceSets.windows.classes)
 manifest.mainAttributes("Plaform": "Windows")
 manifest.mainAttributes("Class-Path": "lib/" + configurations.windows.resolve().name.join(" lib/"))
}

// Wrap the jar archive into an executable
task wrapExe(dependsOn:'windowsJar') << {
 def launch4jDir = System.getenv("LAUNCH4J_HOME")
 ant {
  taskdef(  name : "launch4j",
            classname : "net.sf.launch4j.ant.Launch4jTask",
            classpath : "${launch4jDir}/launch4j.jar;${launch4jDir}/lib/xstream.jar"
  )
  launch4j(
       configFile : "launch4jCommandLine.xml",
       outfile : "${executableDir}/PQ.exe",
       jar : windowsJar.archivePath
  )
 }
}


// Generate the windows zip distribution
task windowsDistrib(type:Zip){
 dependsOn wrapExe
 classifier="windows"
 from('.') {
       include 'resources/**/*.*'
       include 'settings/*.configuration'
       exclude 'resources/*.db3'
       exclude '**/*.svn'
 }
 into ('lib') {
   from configurations.windows
   include '*.jar'
 }
 from(executableDir) {
       include '*.exe'
  }
}


// Generate the macosx jar with all its own manifest
task macosxJar(type:Jar){
 dependsOn macosxClasses
 classifier="macosx"
 destinationDir=file('build/libs/macosx')
 from (sourceSets.macosx.classes)
 manifest.mainAttributes("Platform": "Mac OS X")
 manifest.mainAttributes("Class-Path": "lib/" + configurations.macosx.resolve().name.join(" lib/"))
}



task wrapApp(dependsOn:'macosxJar') << {

   ant {
       taskdef(  name : "jarbundler",
            classname : "net.sourceforge.jarbundler.JarBundler",
            classpath : configurations.macosxTools.asPath
       )
       jarbundler(dir : executableDir,
                 name : "PQ",
            mainclass : "org.pausequafe.PQLauncher",
                  jar : macosxJar.archivePath,
                 icon : "PauseQuafeMac.icns",
           jvmversion : "1.5+",
            arguments : "-XstartOnFirstThread",
       )
   }
}


// Generate the macosx zip distribution
task macosxDistrib(type:Zip){
 dependsOn wrapApp
 classifier="macosx"
 into ('lib') {
   from configurations.macosx
   include '*.jar'
 }
 from('.') {
       include 'resources/**/*.*'
       include 'settings/*.configuration'
       exclude 'resources/*.db3'
       exclude '**/*.svn'
 }
 from(executableDir) {
     include '*.app/**'
 }
}

Closure macClosure = {System.getProperty('os.name').toLowerCase().contains("mac")}

Closure windowsClosure = {System.getProperty('os.name').toLowerCase().contains("win")}


compileMacosxJava.onlyIf macClosure
processMacosxResources.onlyIf macClosure
macosxClasses.onlyIf macClosure
macosxJar.onlyIf macClosure
wrapApp.onlyIf macClosure
macosxDistrib.onlyIf macClosure


compileWindowsJava.onlyIf windowsClosure
processWindowsResources.onlyIf windowsClosure
windowsClasses.onlyIf windowsClosure
windowsJar.onlyIf windowsClosure
wrapExe.onlyIf windowsClosure
windowsDistrib.onlyIf windowsClosure


